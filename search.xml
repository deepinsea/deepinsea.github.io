<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="archives/4a17b156.html"/>
      <url>archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="archives/d95d7e09.html"/>
      <url>archives/d95d7e09.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo快速搭建教程"><a href="#Hexo快速搭建教程" class="headerlink" title="Hexo快速搭建教程"></a>Hexo快速搭建教程</h1> <a id="more"></a><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="本文介绍"><a href="#本文介绍" class="headerlink" title="本文介绍"></a>本文介绍</h3><p>因为自己平时学习技术时遇到过很多坑，在解决的过程中有进行分类整理“爬坑”笔记，的确在下次遇到同样的问题能很快很好的解决。而因为环境的变迁，笔记不能即使的分享，因此需要博客发挥用武之地了。</p><p>接下来我带大家最快速地搭建hexo博客，后续还有hexo的nexmoe主题的美化、hexo博客+gitee/github的部署和hexo的百度seo录入等一系列教程。</p><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><pre><code>http://nodejs.cn/download/</code></pre><h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><pre><code>https://git-scm.com/download/</code></pre><p>安装完之后Node.js是在Dos命令行窗口输入<strong>node -v **和 **npm - v</strong>验证。</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200927131239275.png" alt="image-20200927131239275"></p><p>Git安装完之后验证操作是：鼠标右键效果如下所示。</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200927131622339.png" alt="image-20200927131622339"></p><h3 id="安装hexo基本框架"><a href="#安装hexo基本框架" class="headerlink" title="安装hexo基本框架"></a>安装hexo基本框架</h3><blockquote><p>第一步：新建文件夹</p></blockquote><p>   这一步是为了给你的博客找一个合适的位置。新建的文件夹的命名是随意的。进入新建的文件夹后，鼠标右键点击Git Bash Here 。如下图。</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/18313053-78d148241f4fa81c.jpg"></p><p>image</p><blockquote><p>第二步：安装hexo基础框架</p></blockquote><p>第一步完成后，会出现一个命名窗口。输入如下命令：</p><pre><code class="shell">//第一条   这是安装hexo的基础框架npm install -g hexo//第二条   这是初始化hexo框架 这个可能会比较慢hexo init//第三条 安装所需要的组件npm install//第四条 编译生成静态页面hexo g//第五条 启动本地服务hexo s</code></pre><p>第五条命名完成后，可以首次体验一下，如下图</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/18313053-9e36998e629d5fdd.jpg"></p><p>浏览器中的效果如下：</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/18313053-7deab09a58f4396a.png"></p><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="参考nexmoe主题官方文档"><a href="#参考nexmoe主题官方文档" class="headerlink" title="参考nexmoe主题官方文档"></a>参考nexmoe主题官方文档</h3><pre><code>https://docs.nexmoe.com/hexo-nexmoe/start</code></pre><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><p>在使用 Nexmoe 之前，请仔细阅读 <a href="https://hexo.io/zh-cn/docs/">Hexo 的官方文档</a>，完成对 Hexo 的安装，并完成对 <code>站点配置文件</code> 的基本配置（标题、介绍、作者、时区、语言等）</p><h3 id="遇到问题怎么办？"><a href="#遇到问题怎么办？" class="headerlink" title="遇到问题怎么办？"></a><strong>遇到问题怎么办？</strong></h3><h4 id="1、查阅-Hexo-官方文档"><a href="#1、查阅-Hexo-官方文档" class="headerlink" title="1、查阅 Hexo 官方文档"></a><strong>1、查阅 Hexo 官方文档</strong></h4><p>Hexo 官方文档能解决大部分问题！</p><p>请仔细阅读 <a href="https://hexo.io/zh-cn/docs/">Hexo 的官方文档</a></p><p>请仔细阅读 <a href="https://hexo.io/zh-cn/docs/">Hexo 的官方文档</a></p><p>请仔细阅读 <a href="https://hexo.io/zh-cn/docs/">Hexo 的官方文档</a></p><h4 id="2、查阅本文档"><a href="#2、查阅本文档" class="headerlink" title="2、查阅本文档"></a><strong>2、查阅本文档</strong></h4><p>本文档内容较少，只解决常见问题</p><h4 id="3、使用搜索引擎"><a href="#3、使用搜索引擎" class="headerlink" title="3、使用搜索引擎"></a><strong>3、使用搜索引擎</strong></h4><p>以上方法解决不了的问题，搜索引擎一定能解决，如果搜索引擎都解决不了，那就没办法了。</p><h4 id="下载最新-Release-版本"><a href="#下载最新-Release-版本" class="headerlink" title="下载最新 Release 版本"></a><strong><a href="https://github.com/nexmoe/hexo-theme-nexmoe/releases/latest">下载最新 Release 版本</a></strong></h4><blockquote><p>最新的释出版本，适合大部分用户。</p></blockquote><h4 id="下载其他版本"><a href="#下载其他版本" class="headerlink" title="下载其他版本"></a><strong><a href="https://github.com/nexmoe/hexo-theme-nexmoe/releases">下载其他版本</a></strong></h4><blockquote><p>你可以自己决定想要使用的版本；部分版本可能不再提供技术支持。</p></blockquote><p>选择你所需要的版本，在新打开的页面中找到 Assets 区域，下载 Source Code (zip) 到本地。 解压所下载的压缩包至站点的 <code>themes</code> 目录下， 并将 解压后的文件夹名称 更改为 <code>nexmoe</code></p><h4 id="使用-Git"><a href="#使用-Git" class="headerlink" title="使用 Git"></a><strong><a href="https://github.com/nexmoe/hexo-theme-nexmoe">使用 Git</a></strong></h4><p>你可以自己决定想要使用的分支；使用 Git 下载 Nexmoe 以后还可以使用 <code>git pull</code> 更新 Nexmoe。</p><pre><code class="shell">cd themesgit clone https://github.com/nexmoe/hexo-theme-nexmoe.git nexmoecd nexmoegit checkout {branch/tags name/commit hash}</code></pre><h3 id="安装-Nexmoe"><a href="#安装-Nexmoe" class="headerlink" title="安装 Nexmoe"></a><strong>安装 Nexmoe</strong></h3><p>其他主题不同，安装 Nexmoe 需要额外的步骤；主题默认已经集成了文章【字数统计】、【阅读时长】统计功能，且暂时无法关闭。如果没有安装 hexo-wordcount 插件，先安装该插件：</p><pre><code>npm i --save hexo-wordcount</code></pre><p><strong>Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：</strong></p><pre><code>npm install hexo-wordcount@2 --save</code></pre><p><strong>同时你需要把 Nexmoe 主题目录下的</strong> <strong><code>_config.example.yml</code></strong> <strong>复制一份并把副本重命名为</strong> <strong><code>_config.yml</code></strong></p><p>因为在主题的开发迭代过程中，<code>主题的配置文件</code> 很有可能会有变动。所以我们把 <code>_config.yml</code> 添加到了 <code>.gitignore</code> 之中，这样可以避免使用 <code>git pull</code> 更新主题的用户出现冲突</p><h3 id="启用-Nexmoe"><a href="#启用-Nexmoe" class="headerlink" title="启用 Nexmoe"></a><strong>启用 Nexmoe</strong></h3><p>在 <code>站点配置文件</code> 中，修改 <code>theme</code> 的值为 <code>nexmoe</code></p><h3 id="运行-Nexmoe"><a href="#运行-Nexmoe" class="headerlink" title="运行 Nexmoe"></a><strong>运行 Nexmoe</strong></h3><p>在站点根目录下运行下面的命令在本地启动一个 Hexo Server。</p><pre><code>hexo s --debug</code></pre><blockquote><p>在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。</p></blockquote><p>当命令行输出下述内容时说明 Hexo 已经监听在本机的 4000 端口，使用浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> ，检查站点是否正确运行。</p><pre><code>INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><blockquote><p>如果你在使用过程中遇到问题，请尝试在文档中进行搜索，或者在 GitHub 上 提出 <a href="https://github.com/nexmoe/hexo-theme-nexmoe/issues/new">issue</a></p></blockquote><h3 id="更新-Nexmoe"><a href="#更新-Nexmoe" class="headerlink" title="更新 Nexmoe"></a><strong>更新 Nexmoe</strong></h3><p>如果你是在 <code>版本发布页</code> 下载并安装的 Nexmoe，那么你需要备份你的 <code>主题备份文件</code>，然后将旧的主题文件夹命名为 <code>nexmoe-old</code>，将下载的新版本 Nexmoe 重命名为 <code>nexmoe</code>，根据更新日志的指导迁移旧的 <code>主题配置文件</code> 到新的 <code>主题配置文件</code> 中。测试通过后你可以将 <code>nexmoe-old</code> 删除。</p><p>如果你使用 Git 安装的 Nexmoe，你可以直接在主题文件夹下运行 git pull 更新主题，并把备份之前的 主题配置文件 重命名为 <code>_config.old.yml</code>，复制一份 <code>_config.example.yml</code> 并重命名为 <code>_config.yml</code>。从 <code>_config.old.yml</code> 迁移你的配置到新的 <code>_config.yml</code>测试通过后你可以将 <code>_config.old.yml</code> 删除。</p><p><strong>使用命令</strong></p><pre><code class="shell">// 清除生成的文件hexo clean// 重新生成hexo generate// 启动Hexohexo start </code></pre><p>现在就能正常访问Hexo博客了!</p><p><img src="https://i.loli.net/2020/09/28/poUexgEyZIbM7NG.png"></p><h2 id="爬坑篇"><a href="#爬坑篇" class="headerlink" title="爬坑篇"></a>爬坑篇</h2><h3 id="Hexo图片无法正常显示问题"><a href="#Hexo图片无法正常显示问题" class="headerlink" title="Hexo图片无法正常显示问题"></a>Hexo图片无法正常显示问题</h3><p>关于hexo上图片无法正常显示的问题，有如下解决方法：</p><ol><li><p><strong>设置站点配置<code>_config.yml</code></strong>:</p><p>将<code>post_asset_folder: false</code>改为<code>post_asset_folder: true</code></p></li><li><p><strong>安装插件</strong>:</p><p><code>npm install https://github.com/CodeFalling/hexo-asset-image -- save</code></p></li><li><p><strong>运行<code>hexo n "XXXXXX"</code></strong>,</p><p>生成XXXXX.md博文时就会在<code>/source/_posts</code>目录下生成XXXXXX的文件夹，将你想在XXXXX博文中插入的照片放置到这个同名文件夹中即可，图片的命名随意。</p></li><li><p><strong>添加图片</strong>:</p></li><li><p>在想添加的位置写入<code>![](图片名字.图片格式)</code>,例如<code>![](1.png)</code>。图片的路径和你写入的路径一致。</p></li><li></li><li></li></ol><h3 id="代码块样式美化问题"><a href="#代码块样式美化问题" class="headerlink" title="代码块样式美化问题"></a>代码块样式美化问题</h3><p>   在根目录的_config.yml文件下禁用默认的代码高亮</p><pre><code class="haxe">highlight: enable: false # 禁用hexo默认的代码高亮</code></pre><p>   这样就可以显示自己的代码块样式。</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/https://gitee.com/fall_into_the_deep_sea/PicBed/images/image-20200928222456627.png" alt="image-20200928222456627"></p><h3 id="Hexo-解决网站名中文乱码"><a href="#Hexo-解决网站名中文乱码" class="headerlink" title="Hexo 解决网站名中文乱码"></a>Hexo 解决网站名中文乱码</h3><p>这是因为<strong>站点配置文件</strong>没有使用<code>utf-8</code>编码造成的，所以在<strong>站点配置文件</strong><code>_config.yml</code>中写中文网站名，然后把<strong>站点配置文件</strong>保存为<code>utf-8格式</code>。</p><p>例如：</p><pre><code class="shell"># Sitetitle: 南街北巷的博客subtitle:description: 南街拥风，北巷听雨keywords:author: 南街北巷language: zh_CN #语言改为中文timezone:</code></pre><p>然后重新启动即可：</p><pre><code class="shell">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code></pre><h3 id="文章折叠显示问题"><a href="#文章折叠显示问题" class="headerlink" title="文章折叠显示问题"></a>文章折叠显示问题</h3><p>在文章中添加</p><pre><code class="html">&lt;!-- more --&gt;</code></pre><p>这样的话，more前面的就显示了！more后面的就隐藏起来了！</p><p>注：这是Hexo的原生标签，在标签前一定要有文章的部分内容才能隐藏。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL使用java代码快速插入100W数据</title>
      <link href="archives/1fade3c9.html"/>
      <url>archives/1fade3c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL使用java代码快速插入100W数据"><a href="#MySQL使用java代码快速插入100W数据" class="headerlink" title="MySQL使用java代码快速插入100W数据"></a>MySQL使用java代码快速插入100W数据</h2> <a id="more"></a><p>​     由于压力测试，您需要在数据库中检索大量数据，但数据库中没有太多数据。因此，对于测试，您必须快速将大量临时数据插入数据库。</p><p>​     有两种方法可以快速插入大量数据：一种是使用java代码实现; 另一种是使用数据库存储过程。</p><p>​     首先，你必须有一个数据表，注意数据表的引擎，在构建表时使用MyISAM引擎，MyISAM插入比InnoDB快得多，因为InnoDB的事务支持要好得多，*<strong>*并且在大多数情况下是default使用InnoDB，因此您可以在插入数据后将其修改为InnoDB**</strong>。</p><pre><code class="sql">CREATE TABLE `tb_data` (  `id` int(11) DEFAULT NULL,  `user_name` varchar(100) DEFAULT NULL,  `create_time` datetime DEFAULT NULL,  `random` double DEFAULT NULL) ENGINE=MyISAM DEFAULT CHARSET=utf8;</code></pre><p>​    使用java代码，实际插入100万条数据需要6秒。<br>代码示例：</p><pre><code class="java">package com.test;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.SQLException;public class InsertDataDemo {    static Connection conn = null;    public static void initConn() throws ClassNotFoundException, SQLException {        String url = "jdbc:mysql://localhost:3306/testdb?"                + "user=root&amp;password=root&amp;useUnicode=true&amp;characterEncoding=UTF8&amp;useSSL=false&amp;serverTimezone=UTC";        try {            / / Dynamically load mysql driver            Class.forName("com.mysql.jdbc.Driver");                         System.out.println("Successfully loaded MySQL driver");            conn = DriverManager.getConnection(url);        } catch (Exception e) {            e.printStackTrace();        }    }    public static String randomStr(int size) {                 / / Define an empty string        String result = "";        for (int i = 0; i &lt; size; ++i) {                         / / Generate an int type integer between 97 ~ 122            int intVal = (int) (Math.random() * 26 + 97);                         / / Force conversion (char) intVal Convert the corresponding value to the corresponding character, and splicing the characters            result = result + (char) intVal;        }                 / / Output string        return result;    }    public static void insert(int insertNum) {                 // open time        Long begin = System.currentTimeMillis();                 System.out.println("Start Inserting Data...");                 // sql prefix        String prefix = "INSERT INTO tb_data (id, user_name, create_time, random) VALUES ";        try {                         // save the sql suffix            StringBuffer suffix = new StringBuffer();                         / / Set the transaction to non-automatic commit            conn.setAutoCommit(false);            PreparedStatement pst = conn.prepareStatement("");            for (int i = 1; i &lt;= insertNum; i++) {                                 / / Build sql suffix                suffix.append("(" + i +",'"+ randomStr(8)  + "', SYSDATE(), " + i * Math.random() + "),");            }                         / / Build a complete sql            String sql = prefix + suffix.substring(0, suffix.length() - 1);                         / / Add execution sql            pst.addBatch(sql);                         // perform the operation            pst.executeBatch();                         // commit the transaction            conn.commit();                         // close the connection            pst.close();            conn.close();        } catch (SQLException e) {            e.printStackTrace();        }                 // End Time         Long end = System.currentTimeMillis();                 System.out.println("insert"+insertNum+" data data is completed!");                 System.out.println("Time-consuming : " + (end - begin) / 1000 + "seconds");    }    public static void main(String[] args) throws SQLException, ClassNotFoundException {        initConn();        insert(1000000);    }}</code></pre><p>注意，这里有两个坑。执行后，不出所料会出现下面的错误：</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200825022534929.png" alt="image-20200825022534929"></p><pre><code>Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.Successfully loaded MySQL driverStart Inserting Data...java.sql.SQLException: SQL String cannot be empty</code></pre><p>解决：</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200825022713029.png" alt="image-20200825022713029"></p><p>修改为：</p><pre><code class="xml"> &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;version&gt;5.1.47&lt;/version&gt;            &lt;scope&gt;runtime&lt;/scope&gt;        &lt;/dependency&gt;</code></pre><p>修改MySQL驱动版本为5.1+版本后，发现控制台报OOM异常，查看my.ini配置文件发现是数据库引擎内存最大值（5.7默认是1M）设置的问题：</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200825030453797.png" alt="image-20200825030453797"></p><pre><code>java.sql.BatchUpdateException: Packet for query is too large (50235460 &gt; 1048576). You can change this value on the server by setting the max_allowed_packet' variable.</code></pre><p>查看内存大小：</p><pre><code class="shell">mysql&gt; show VARIABLES like '%max_allowed_packet%';</code></pre><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200825025548421.png" alt="image-20200825025548421"></p><p>控制台修改内存大小（也可直接修改my.ini配置文件）</p><pre><code class="shell">mysql&gt; mysql --max_allowed_packet=500M或set global max_allowed_packet = 4*1024*1024*10</code></pre><p>保存，重启MySQL服务</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200825030322144.png" alt="image-20200825030322144"></p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200825030908540.png" alt="image-20200825030908540"></p><p>最后，控制台输出：</p><pre><code>Successfully loaded MySQL driverStart Inserting Data...insert1000000 data data is completed!Time-consuming : 7secondsProcess finished with exit code 0</code></pre><p>数据库显示</p><p><img src="https://gitee.com/fall_into_the_deep_sea/PicBed/raw/master/images/image-20200825031237631.png" alt="image-20200825031237631"></p><p>到这里，100w数据实现插入的优化就到此结束了，是不是有点牛逼克拉斯😏</p><p>在这里还是不得不提，MyISAM引擎插入效率的确不是InnoDB可以比的100w 7秒的确有点厉害😎</p><p><strong>注意</strong></p><p>适当增加mysql的max_allowed_packet参数值允许系统在客户端到服务器端传递大数据时分配更多扩展内存以进行处理。<br>修改mysql配置文件（命令行修改不了的）：</p><pre><code class="ini">[mysqld]# 没有不需要添加net_buffer_length=512kmax_allowed_packet=500M</code></pre><p><strong>– 更改引擎的语句</strong><br>ALTER TABLE 表名 ENGINE=<strong>MyISAM</strong>;</p><p><strong>– 更改引擎的语句</strong><br>ALTER TABLE 表明 ENGINE=<strong>InnoDB</strong>;</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
